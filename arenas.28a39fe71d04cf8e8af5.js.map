{"version":3,"file":"arenas.28a39fe71d04cf8e8af5.js","mappings":"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","sources":["webpack://mortal-combat/./src/utils/render.js","webpack://mortal-combat/./src/player.js","webpack://mortal-combat/./src/utils/common.js","webpack://mortal-combat/./src/const.js","webpack://mortal-combat/./src/utils/log.js","webpack://mortal-combat/./src/log.js","webpack://mortal-combat/./src/utils/game.js","webpack://mortal-combat/./src/arenas.js","webpack://mortal-combat/./src/game.js","webpack://mortal-combat/./src/utils/player.js"],"sourcesContent":["/**\n * Possible render position.\n */\nconst RenderPosition = {\n  AFTERBEGIN: 'afterbegin',\n  BEFOREEND: 'beforeend',\n};\n\n/**\n * Create element from tag and class names.\n * @param {string} tag - Tag name.\n * @param {string | undefined} className - Needed class for element or nothing.\n * @return {HTMLElement}\n */\nconst createElement = (tag, className) => {\n  const $tag = document.createElement(tag);\n\n  if (className) {\n    $tag.classList.add(className);\n  }\n\n  return $tag;\n};\n\n/**\n * Render child element in to container.\n * @param {HTMLElement} container\n * @param {HTMLElement} child\n * @param {string} place\n */\nconst render = (container, child, place = RenderPosition.BEFOREEND) => {\n  switch (place) {\n    case RenderPosition.AFTERBEGIN:\n      container.prepend(child);\n      break;\n    case RenderPosition.BEFOREEND:\n      container.append(child);\n      break;\n    default:\n      throw new Error(`Wrong render position: ${place}`);\n  }\n};\n\nexport {\n  RenderPosition,\n  createElement,\n  render,\n};\n","import { createElement } from './utils/render';\n\n/**\n * Player.\n */\nexport default class Player {\n  /**\n   * @param {number} player - Unique number of player.\n   * @param {string} name - Character name.\n   * @param {number} hp - Current player's health.\n   * @param {string} img - Path to gif image of character.\n   */\n  constructor(\n    {\n      player, name, hp, img,\n    },\n  ) {\n    this.player = player;\n    this.name = name;\n    this.hp = hp;\n    this.img = img;\n    this.action = {};\n  }\n\n  /**\n   * Change player's health.\n   */\n  changeHp() {\n    this.hp -= this.action.damage;\n\n    if (this.hp <= 0) {\n      this.hp = 0;\n    }\n\n    this.renderHP();\n  }\n\n  /**\n   * Render health line according hp value.\n   */\n  renderHP() {\n    this.elHP.style.width = `${this.hp}%`;\n  }\n\n  /**\n   * Player miss.\n   */\n  miss() {\n    this.action.value = 0;\n  }\n\n  /**\n   * Get health line element.\n   * @readonly\n   */\n  get elHP() {\n    return document.querySelector(`.player${this.player} .life`);\n  }\n\n  /**\n   * Get player element.\n   * @readonly\n   */\n  get element() {\n    const $player = createElement('div', `player${this.player}`);\n    const $porgressbar = createElement('div', 'progressbar');\n    const $character = createElement('div', 'character');\n    const $life = createElement('div', 'life');\n    const $name = createElement('div', 'name');\n    const $img = createElement('img');\n\n    $life.style.width = `${this.hp}%`;\n    $name.innerText = this.name;\n    $img.src = this.img;\n\n    $porgressbar.appendChild($name);\n    $porgressbar.appendChild($life);\n\n    $character.appendChild($img);\n\n    $player.appendChild($porgressbar);\n    $player.appendChild($character);\n\n    return $player;\n  }\n}\n","/**\n* Generate random init.\n* @param {number} a\n* @param {number} b\n* @return {number} - Random number between the \"a\" param and the the \"b\" param.\n*/\nconst getRandomInt = (a = 1, b = 0) => {\n  const lower = Math.ceil(Math.min(a, b));\n  const upper = Math.floor(Math.max(a, b));\n  return Math.floor(lower + Math.random() * (upper - lower + 1));\n};\n\n/**\n * Returns random element from Array.\n * @param {Array} array - Array of elements.\n * @return - Random element;\n */\nconst getRandomElement = (array) => {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n  if (array.length === 0) {\n    throw new Error('Array is empty.');\n  }\n  return array[getRandomInt(0, array.length - 1)];\n};\n\nexport {\n  getRandomInt,\n  getRandomElement,\n};\n","/**\n * Some names of Mortal Kombat characters.\n */\nconst NAMES = [\n  'Scorpion',\n  'Kitana',\n  'Liukang',\n  'Sonya',\n  'Subzero',\n];\n\n/**\n * Some names weapons that characters use.\n */\nconst WEAPONS = [\n  'Katana',\n  'Ice',\n  'Fireball',\n  'Strom',\n  'Titan Hands',\n  'Smart Brain',\n];\n\n/**\n * Default player hp value/\n */\nconst HP_DEFAULT_VALUE = 100;\n\n/**\n * Result title class name,\n */\nconst RESULT_CLASS_NAME = 'resultTitle';\n\n/**\n * Result text title.\n */\nconst ResultTitle = {\n  DRAW: 'Ha, draw! You are all losers!',\n  WIN: 'wins',\n};\n\n/**\n * Hit's value.\n */\nconst Hit = {\n  head: 30,\n  body: 25,\n  foot: 20,\n};\n\n/**\n * Possible place for attack.\n */\nconst ATTACK = Object.keys(Hit);\n\n/**\n * Action type.\n */\nconst Action = {\n  START: 'start',\n  END: 'end',\n  HIT: 'hit',\n  DEFENCE: 'defence',\n  DRAW: 'draw',\n};\n\nexport {\n  NAMES,\n  WEAPONS,\n  HP_DEFAULT_VALUE,\n  RESULT_CLASS_NAME,\n  ResultTitle,\n  Hit,\n  ATTACK,\n  Action,\n};\n","import { Action } from '../const';\n\n/**\n * Log messages template.\n */\nconst logTemplate = {\n  [Action.START]: 'Часы показывали [time], когда [player1] и [player2] бросили вызов друг другу.',\n  [Action.END]: [\n    'Результат удара [playerWins]: [playerLose] - труп',\n    '[playerLose] погиб от удара бойца [playerWins]',\n    'Результат боя: [playerLose] - жертва, [playerWins] - убийца',\n  ],\n  [Action.HIT]: [\n    '[playerDefence] пытался сконцентрироваться, но [playerKick] разбежавшись раздробил копчиком левое ухо врага.',\n    '[playerDefence] расстроился, как вдруг, неожиданно [playerKick] случайно раздробил грудью грудину противника.',\n    '[playerDefence] зажмурился, а в это время [playerKick], прослезившись, раздробил кулаком пах оппонента.',\n    '[playerDefence] чесал <вырезано цензурой>, и внезапно неустрашимый [playerKick] отчаянно размозжил грудью левый бицепс оппонента.',\n    '[playerDefence] задумался, но внезапно [playerKick] случайно влепил грубый удар копчиком в пояс оппонента.',\n    '[playerDefence] ковырялся в зубах, но [playerKick] проснувшись влепил тяжелый удар пальцем в кадык врага.',\n    '[playerDefence] вспомнил что-то важное, но внезапно [playerKick] зевнув, размозжил открытой ладонью челюсть противника.',\n    '[playerDefence] осмотрелся, и в это время [playerKick] мимоходом раздробил стопой аппендикс соперника.',\n    '[playerDefence] кашлянул, но внезапно [playerKick] показав палец, размозжил пальцем грудь соперника.',\n    '[playerDefence] пытался что-то сказать, а жестокий [playerKick] проснувшись размозжил копчиком левую ногу противника.',\n    '[playerDefence] забылся, как внезапно безумный [playerKick] со скуки, влепил удар коленом в левый бок соперника.',\n    '[playerDefence] поперхнулся, а за это [playerKick] мимоходом раздробил коленом висок врага.',\n    '[playerDefence] расстроился, а в это время наглый [playerKick] пошатнувшись размозжил копчиком губы оппонента.',\n    '[playerDefence] осмотрелся, но внезапно [playerKick] робко размозжил коленом левый глаз противника.',\n    '[playerDefence] осмотрелся, а [playerKick] вломил дробящий удар плечом, пробив блок, куда обычно не бьют оппонента.',\n    '[playerDefence] ковырялся в зубах, как вдруг, неожиданно [playerKick] отчаянно размозжил плечом мышцы пресса оппонента.',\n    '[playerDefence] пришел в себя, и в это время [playerKick] провел разбивающий удар кистью руки, пробив блок, в голень противника.',\n    '[playerDefence] пошатнулся, а в это время [playerKick] хихикая влепил грубый удар открытой ладонью по бедрам врага.',\n  ],\n  [Action.DEFENCE]: [\n    '[playerKick] потерял момент и храбрый [playerDefence] отпрыгнул от удара открытой ладонью в ключицу.',\n    '[playerKick] не контролировал ситуацию, и потому [playerDefence] поставил блок на удар пяткой в правую грудь.',\n    '[playerKick] потерял момент и [playerDefence] поставил блок на удар коленом по селезенке.',\n    '[playerKick] поскользнулся и задумчивый [playerDefence] поставил блок на тычок головой в бровь.',\n    '[playerKick] старался провести удар, но непобедимый [playerDefence] ушел в сторону от удара копчиком прямо в пятку.',\n    '[playerKick] обманулся и жестокий [playerDefence] блокировал удар стопой в солнечное сплетение.',\n    '[playerKick] не думал о бое, потому расстроенный [playerDefence] отпрыгнул от удара кулаком куда обычно не бьют.',\n    '[playerKick] обманулся и жестокий [playerDefence] блокировал удар стопой в солнечное сплетение.',\n  ],\n  [Action.DRAW]: 'Ничья - это тоже победа!',\n};\n\n/**\n * Returns formatted date as hh:mm.\n * @param {Object} date - Date.\n * @returns {string}\n */\nconst humanizeTime = (date) => {\n  let hour = date.getHours();\n  let minutes = date.getMinutes();\n\n  if (minutes.length === 0) {\n    minutes = `0${minutes}`;\n  }\n\n  if (hour.length === 0) {\n    hour = `0${hour}`;\n  }\n\n  return `${hour}:${minutes}`;\n};\n\nexport {\n  humanizeTime,\n  logTemplate,\n};\n","import { getRandomElement } from './utils/common';\nimport { logTemplate, humanizeTime } from './utils/log';\nimport { render, RenderPosition } from './utils/render';\n\n/**\n * Log of event.\n */\nexport default class Log {\n  /**\n   * @param {HTMLElement} $container - Container where log needs to be render.\n   * @param {Object} time - Date of log's creating.\n   * @param {string} type - Type of log.\n   */\n  constructor(\n    $container,\n    time,\n    type,\n  ) {\n    this.$container = $container;\n    this.time = time;\n    this.type = type;\n    this.template = getRandomElement(logTemplate[this.type]);\n  }\n\n  /**\n   * Create end return log element.\n   * @return {HTMLElement}\n   */\n  get $element() {\n    const element = document.createElement('p');\n    element.textContent = this.text;\n\n    return element;\n  }\n\n  /**\n   * Render log in container.\n   */\n  show() {\n    render(this.$container, this.$element, RenderPosition.AFTERBEGIN);\n  }\n\n  /**\n   * Create start game event log text.\n   * @param {string} playerName\n   * @param {string} enemyName\n   */\n  start(\n    playerName,\n    enemyName,\n  ) {\n    this.text = this.template\n      .replace('[player1]', playerName)\n      .replace('[player2]', enemyName)\n      .replace('[time]', humanizeTime(this.time));\n  }\n\n  /**\n   * Create end game event log text.\n   * @param {string} winnerName\n   * @param {string} loserName\n   */\n  end(\n    winnerName,\n    loserName,\n  ) {\n    this.text = this.template\n      .replace('[playerWins]', winnerName)\n      .replace('[playerLose]', loserName);\n  }\n\n  /**\n   * Create player of enemy defence event log text.\n   * @param {string} attackerName\n   * @param {string} defenderName\n   */\n  defence(\n    attackerName,\n    defenderName,\n  ) {\n    const time = humanizeTime(this.time);\n    const message = this.template\n      .replace('[playerKick]', attackerName)\n      .replace('[playerDefence]', defenderName);\n\n    this.text = `${time}: ${message}`;\n  }\n\n  /**\n   * Create player of enemy hit event log text.\n   * @param {string} attackerName\n   * @param {string} defenderName\n   * @param {string} defenderHp\n   * @param {string} damage\n   * @param {string} maxHp\n   */\n  hit(\n    attackerName,\n    defenderName,\n    defenderHp,\n    damage,\n    maxHp,\n  ) {\n    const time = humanizeTime(this.time);\n    const message = this.template\n      .replace('[playerKick]', attackerName)\n      .replace('[playerDefence]', defenderName);\n    this.text = `${time} ${message}  -${damage} [${defenderHp}/${maxHp}]`;\n  }\n\n  /**\n   * Create draw game event log text.\n   */\n  draw() {\n    this.text = this.template;\n  }\n}\n","import { createElement } from './render';\n\n/**\n * Create and returns restart button.\n * @return {HTMLElement}\n */\nconst createRestartButton = () => {\n  const $wrap = createElement('div', 'reloadWrap');\n  const $button = createElement('button', 'button');\n  $button.setAttribute('type', 'button');\n  $button.textContent = 'Restart';\n\n  $button.addEventListener('click', (evt) => {\n    evt.preventDefault();\n    window.location.reload();\n  });\n\n  $wrap.appendChild($button);\n  return $wrap;\n};\n\nexport {\n  // eslint-disable-next-line import/prefer-default-export\n  createRestartButton,\n};\n","// import createPlayers from './mock/create-players';\nimport Game from './game';\n\n/**\n * Default players count.\n */\nconst PLAYERS_COUNT = 2;\n\n/**\n * Game elements.\n */\nconst element = {\n  $arena: document.querySelector('.arenas'),\n  $formFight: document.querySelector('.control'),\n  $chat: document.querySelector('.chat'),\n};\n\n/**\n * Players data.\n */\n// const players = createPlayers(PLAYERS_COUNT);\n\n/**\n * Create the game.\n */\nconst game = new Game(element);\n\n/**\n * Start the game.\n */\n// game.init(players);\n","import Player from './player';\nimport Log from './log';\nimport {\n  Action,\n  HP_DEFAULT_VALUE,\n  ResultTitle,\n  RESULT_CLASS_NAME,\n} from './const';\nimport { createElement } from './utils/render';\nimport { createRestartButton } from './utils/game';\nimport { createEnemyAction, createPlayerAction } from './utils/player';\n\n/**\n * Game.\n */\nexport default class Game {\n  /**\n   * @param {HTMLElement} $arena - Battle container.\n   * @param {HTMLElement} $formFight - Form with battle controls.\n   * @param {HTMLElement} $chat - Container of logs.\n   */\n  constructor(\n    {\n      $arena,\n      $formFight,\n      $chat,\n    },\n  ) {\n    this.$arena = $arena;\n    this.$formFight = $formFight;\n    this.$chat = $chat;\n  }\n\n  /**\n   * Start the game.\n   * @param {Array} data - Players.\n   */\n  init(data) {\n    this.players = data.map((player) => new Player(player));\n    this.logs = [];\n    this.winner = null;\n    this.loser = null;\n\n    [this.player, this.enemy] = this.players;\n\n    this.handleFormFightSubmit = this.handleFormFightSubmit.bind(this);\n    this.$formFight.addEventListener('submit', this.handleFormFightSubmit);\n\n    this.renderPlayers();\n  }\n\n  /**\n   * On form fight submit handler. Runs every after 'Fight' button pressed.\n   * @param {Object} evt - Event.\n   */\n  handleFormFightSubmit(evt) {\n    evt.preventDefault();\n    this.player.action = createPlayerAction(Object.values(evt.target));\n    this.enemy.action = createEnemyAction();\n\n    this.fight();\n  }\n\n  /**\n   * Fight event. Players attack each other and try to defence from hit.\n   */\n  fight() {\n    this.players.forEach((player) => {\n      this.attacker = player;\n      // FIXME: Rewrite according O(log n) optimization(?).\n      this.defender = this.players\n        .filter((defender) => defender !== this.attacker)\n        .shift();\n      this.hit();\n    });\n\n    this.$formFight.reset();\n    this.checkGameStatus();\n  }\n\n  /**\n   * Attacking player hits (or miss) defender.\n   */\n  hit() {\n    if (this.attacker.action.hit === this.defender.action.defence) {\n      this.miss();\n      return;\n    }\n    this.defender.action.damage = this.attacker.action.value;\n    this.defender.changeHp();\n\n    this.showLog(Action.HIT);\n  }\n\n  /**\n   * Check players health after any hit in order to check is the game has to be ended.\n   * @return\n   */\n  checkGameStatus() {\n    if (this.player.hp === 0 && this.enemy.hp === 0) {\n      this.draw();\n      return;\n    }\n\n    if (this.player.hp === 0 || this.enemy.hp === 0) {\n      this.win();\n    }\n  }\n\n  /**\n   * Draw event. If after fight event (players hit each other) players health equal to zero.\n   */\n  draw() {\n    this.showLog(Action.DRAW);\n    this.showResult(ResultTitle.DRAW);\n    this.finish();\n  }\n\n  /**\n   * Finish the game.\n   */\n  finish() {\n    this.$arena.appendChild(createRestartButton());\n    this.$formFight.remove();\n  }\n\n  /**\n   * Win event. If some of players has health equal to zero finish the game.\n   */\n  win() {\n    // FIXME: Rewrite according DRY.\n    if (this.player.hp === 0) {\n      this.loser = this.player;\n      this.winner = this.enemy;\n    }\n\n    if (this.enemy.hp === 0) {\n      this.loser = this.enemy;\n      this.winner = this.player;\n    }\n\n    this.showLog(Action.END);\n    this.showResult(ResultTitle.WIN, this.winner.name);\n    this.finish();\n  }\n\n  /**\n   * Miss event. Player missed when attacking player hits to defended defender's part of body.\n   */\n  miss() {\n    this.attacker.miss();\n    this.showLog(Action.DEFENCE);\n  }\n\n  createLog(type) {\n    return new Log(\n      this.$chat,\n      new Date(),\n      type,\n    );\n  }\n\n  /**\n   * Render players in a game area. Runs when the game just started.\n   */\n  renderPlayers() {\n    this.players.forEach((player) => this.$arena.appendChild(player.element));\n    this.showLog(Action.START);\n  }\n\n  /**\n   * Show result message of the game ending.\n   * @param {string} message - Result text.\n   * @param {string | undefined} playerName - Winner player name if we have a winner.\n   */\n  showResult(message, playerName) {\n    const $resultTitle = createElement('div', RESULT_CLASS_NAME);\n\n    $resultTitle.innerHTML = playerName\n      ? `${playerName} ${message}`\n      : message;\n\n    this.$formFight.remove();\n    this.$arena.appendChild($resultTitle);\n    this.$arena.appendChild(createRestartButton());\n  }\n\n  /**\n   * Show log message in the chat.\n   * @param {string} type - Log message.\n   */\n  showLog(type) {\n    const log = new Log(\n      this.$chat,\n      new Date(),\n      type,\n    );\n\n    switch (type) {\n      case Action.START:\n        log.start(this.player.name, this.enemy.name);\n        break;\n      case Action.END:\n        log.end(this.winner.name, this.loser.name);\n        break;\n      case Action.DEFENCE:\n        log.defence(this.attacker.name, this.defender.name);\n        break;\n      case Action.HIT:\n        log.hit(\n          this.attacker.name,\n          this.defender.name,\n          this.defender.hp,\n          this.attacker.action.value,\n          HP_DEFAULT_VALUE,\n        );\n        break;\n      case Action.DRAW:\n        log.draw();\n        break;\n      default:\n        throw new Error(`Unknow action type ${type}`);\n    }\n    this.logs.push(log);\n    log.show();\n  }\n}\n","import { Action, Hit, ATTACK } from '../const';\n\nimport {\n  getRandomElement,\n} from './common';\n\n// FIXME: Merge functions to 'createAction' function ?\n/**\n * Create player action param.\n * @param {Array} controls - Player's controls.\n * @return {Object} - Player's action.\n */\nconst createPlayerAction = (controls) => {\n  const action = {};\n\n  controls.forEach((control) => {\n    if (control.checked) {\n      if (control.name === Action.HIT) {\n        action.hit = control.value;\n        action.value = Hit[control.value];\n      }\n\n      if (control.name === Action.DEFENCE) {\n        action.defence = control.value;\n      }\n    }\n  });\n\n  return action;\n};\n\n/**\n * Create enemy player action param.\n * @return {Object}\n */\nconst createEnemyAction = () => {\n  const hit = getRandomElement(ATTACK);\n  const defence = getRandomElement(ATTACK);\n\n  return {\n    value: Hit[hit],\n    hit,\n    defence,\n  };\n};\n\nexport {\n  createPlayerAction,\n  createEnemyAction,\n};\n"],"names":["RenderPosition","createElement","tag","className","$tag","document","classList","add","Player","constructor","player","name","hp","img","this","action","changeHp","damage","renderHP","elHP","style","width","miss","value","querySelector","element","$player","$porgressbar","$character","$life","$name","$img","innerText","src","appendChild","getRandomElement","array","Array","isArray","length","Error","a","b","lower","Math","ceil","min","upper","floor","max","random","getRandomInt","Hit","head","body","foot","ATTACK","Object","keys","Action","logTemplate","humanizeTime","date","hour","getHours","minutes","getMinutes","Log","$container","time","type","template","$element","textContent","text","show","container","child","place","prepend","append","render","start","playerName","enemyName","replace","end","winnerName","loserName","defence","attackerName","defenderName","message","hit","defenderHp","maxHp","draw","createRestartButton","$wrap","$button","setAttribute","addEventListener","evt","preventDefault","window","location","reload","$arena","$formFight","$chat","init","data","players","map","logs","winner","loser","enemy","handleFormFightSubmit","bind","renderPlayers","controls","forEach","control","checked","createPlayerAction","values","target","createEnemyAction","fight","attacker","defender","filter","shift","reset","checkGameStatus","showLog","win","showResult","finish","remove","createLog","Date","$resultTitle","innerHTML","log","push"],"sourceRoot":""}